["H = group_history:load().\n","group_history:load().\n",
 "l(group_history).\n","code:load_module(nvim_test).\n",
 "code:is_loaded(nvim_test).\n","code:load_file(nvim_test).\n",
 "code:is_loaded(nvim_test).\n","flush().\n",
 "msgpack:unpack(<<148,1,1,174,105,110,116,101,114,110,97,108,32,101,114,114,111,114,192>>).\n",
 "msgpack:unpack([148,1,1,174,105,110,116,101,114,110,97,108,32,101,114,114,111,114,192]).\n",
 "msgpack:unpack([148,1,1,174,105,110,116,101,114,110,97,108,32,101,114,114,).\n",
 "flush().\n","l(msgpack_rpc_fileio_server).\n",".\n","45.6\n","123.\n",
 "msgpack:pack(nvim_test:module_info()).\n","nvim_test:module_info().\n",
 "flush().\n","erlang:port_command(P, Msg2).\n",
 "Msg2 = msgpack:pack([0, 1, <<\"module_info\">>, []]).\n",
 "filename:join([\"asd\", \"*.beam\"]).\n",
 "filename:join([ebin_dir(escript:script_name()), \"*.beam\"]).\n",
 "[ list_to_atom(filename:basename(M, \".beam\")) || M <- filelib:wildcard(\"ebin/*.beam\") ].\n",
 "[ list_to_existing_atom(filename:basename(M, \".beam\")) || M <- filelib:wildcard(\"ebin/*.beam\") ].\n",
 "[ filename:basename(M, \".beam\") || M <- filelib:wildcard(\"ebin/*.beam\") ].\n",
 "filelib:wildcard(\"ebin/*.beam\").\n","filelib:wildcard(\"ebin/*\").\n",
 "filelib:wildcard(\"ebin\").\n","l(file).\n",
 "Msg = msgpack:pack([2, <<\"module_info\">>, []]).\n",
 "Msg = msgpack:pack([2, <<\"module_info\">>, []]).\n",
 "erlang:port_command(P, Msg).\n","erlang:port_command(P, Msg).\n",
 "erlang:port_command(P, Msg).\n",
 "Msg = msgpack:pack([2, <<\"module_info\">>, []]).\n",
 "msgpack:pack([2, <<\"module_info\">>, []]).\n",
 "msgpack:pack([2, <<, []]).\n","msgpack:pack([2, 'asd', []]).\n",
 "msgpack:pack([2, 'zxc', []]).\n","msgpack:pack([2, 'qwe', []]).\n",
 "msgpack:pack([2, 'nil', []]).\n","msgpack:pack([2, nil, []]).\n",
 "msgpack:unpack(msgpack:pack([2, nil, []])).\n",
 "msgpack:pack([2, nil, []]).\n","msgpack:pack([2, nil, [nil]]).\n",
 "msgpack:pack([2, nil, []]).\n","msgpack:unpack(Packed).\n",
 "Packed = msgpack:pack([2, <<\"asd\">>, []]).\n",
 "msgpack:pack([2, <<\"asd\">>, []]).\n","msgpack:pack([2, \"asd\", []]).\n",
 "msgpack:pack([2, asd, []]).\n","msgpack:pack([<<\"2\">>]).\n",
 "msgpack:pack({[{[<<\"2\">>]}]}).\n","msgpack:pack({<<\"2\">>}).\n",
 "msgpack:pack({<<\"2\">>}).\n","msgpack:pack({[<<\"2\">>]}).\n",
 "msgpack:pack({[{[<<\"2\">>]}]}).\n",
 "msgpack:pack({[{[<<\"2\">>]}, {[<<\"asd\">>]}]}).\n",
 "msgpack:pack({[{[<<\"2\">>]}, {[<<\"asd\">>]}, {[<<>>]}]}).\n",
 "msgpack:pack({[{[<<\"2\">>]}, {[<<\"asd\">>]}, {[]}]}).\n",
 "msgpack:pack({[{[<<\"2\">>]}, {<<\"asd\">>}, {[]}]}).\n",
 "msgpack:pack({[{<<\"2\">>}, {<<\"asd\">>}, {[]}]}).\n",
 "msgpack:pack({[{2}, {<<\"asd\">>}, {[]}]}).\n",
 "msgpack:pack({[2, <<\"asd\">>, []]}).\n",
 "erlang:port_command(P, msgpack:pack({[2, <<\"asd\">>, []]})).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"45zz6\">>}]})).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"456\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n","123.\n",
 "flush().\n","f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "msgpack_rpc_fileio_server:module_info().\n","flush().\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n","flush().\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, \"asdQWE\").\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "P2 = erlang:open_port({spawn, \"tee z\"}, []).\n",
 "erlang:port_command(P2, \"asdQWE\").\n",
 "P2 = erlang:open_port({spawn, \"tee z\"}, [use_stdio]).\n",
 "erlang:port_command(P2, \"asdQWE\").\n",
 "P2 = erlang:open_port({spawn, \"cat\"}, [use_stdio]).\n",
 "erlang:port_command(P2, \"asdQWE\").\n",
 "P2 = erlang:open_port({spawn, \"cat\"}, [use_stdio]).\n",
 "erlang:port_command(P2, \"asdQWE\").\n",
 "P2 = erlang:open_port({spawn, \"cat > z\"}, [use_stdio]).\n",
 "erlang:port_command(P2, \"asdQWE\").\n",
 "P2 = erlang:open_port({spawn, \"cat > z\"}, []).\n",
 "erlang:port_command(P2, \"asdQWE\").\n",
 "P2 = erlang:open_port({spawn, \"cat > /dev/null\"}, []).\n",
 "P2 = erlang:open_port({spawn_executable, \"cat > /dev/null\"}, []).\n",
 "erlang:port_command(P2, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "erlang:is_port(P2).\n","erlang:is_port(P).\n",
 "P2 = erlang:open_port({spawn, \"cat > /dev/null\"}, []).\n",
 "erlang:is_port(P).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "erlang:is_port(P).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"qwe\">>, <<\"123\">>}]})).\n",
 "msgpack_rpc_fileio_server:start_link(F, undef, []).\n",
 "{ok, F} = file:open(\"test1\", read).\n","f().\n",
 "{ok, F} = file:open(\"test1\", read).\n",
 "msgpack_rpc_fileio_server:start_link(F, undef, []).\n",
 "{ok, F} = file:open(\"test1\", read).\n",
 "msgpack_rpc_fileio_server:start_link(F, undef, []).\n",
 "{ok, F} = file:open(\"test1\", read).\n",
 "msgpack_rpc_fileio_server:start_link(F, undef, []).\n",
 "{ok, F} = file:open(\"test1\", read).\n","f().\n",
 "{ok, F} = file:open(\"test1\", read).\n",
 "msgpack_rpc_fileio_server:start_link(F, undef, []).\n",
 "dbg:tpl(msgpack_rpc_fileio_server, x).\n","dbg:p(all, call).\n",
 "dbg:tracer().\n","123.\n",
 "%%msgpack_rpc_fileio_server:start_link(F, undef, \n",
 "{ok, F} = file:open(\"test1\", read).\n","msgpack:unpack_stream(R).\n",
 "{_, R} = msgpack:unpack_stream(Data).\n","msgpack:unpack_stream(Data).\n",
 "msgpack:unpack(Data).\n","msgpack:unpack_stream(Data).\n",
 "{ok, Data} = file:read_file(\"test1\").\n","f().\n",
 "file:write_file(\"test1\", [msgpack:pack({[{<<\"zxc\">>, 3}]})], [append]).\n",
 "msgpack:unpack_stream(Data).\n","{ok, Data} = file:read_file(\"test1\").\n",
 "file:write_file(\"test1\", [msgpack:pack({[{<<\"qwe\">>, 1}]})], []).\n",
 "file:write_file(\"test1\", [msgpack:pack({[{<<\"zxc\">>, 3}]})], []).\n",
 "msgpack:unpack_stream(Data).\n","msgpack:unpack(Data).\n",
 "{ok, Data} = file:read_file(\"test1\").\n",
 "msgpack:unpack_stream(file:read_file(\"test1\")).\n",
 "msgpack:unpack(file:read_file(\"test1\")).\n",
 "file:write_file(\"test1\", [msgpack:pack({[{<<\"zxc\">>, 3}]})], [append]).\n",
 "file:write_file(\"test1\", [msgpack:pack({[{<<\"qwe\">>, 1}]})], [append]).\n",
 "file:write_file(\"test1\", [msgpack:pack({[{<<\"qwe\">>, 1]})], [append]).\n",
 "file:write_file(\"test1\", [msgpack:pack({[<<\"qwe\">>]})], [append]).\n",
 "file:write_file(\"test1\", [msgpack:pack({[<<\"asd\">>]})], [append]).\n",
 "file:write_file(\"test1\", [msgpack:pack({<<\"asd\">>})], [append]).\n",
 "file:open(\"./z\", write).\n","file:open(\"z\", write).\n",
 "file:open(\"z\", [read, write]).\n","dbg:p(all, call).\n","dbg:tracer().\n",
 "123.\n","msgpack_rpc_fileio_server:start_link(standard_io, undef, []).\n",
 "dbg:tpl(msgpack_rpc_fileio_server, x).\n","dbg:p(all, call).\n",
 "dbg:tracer().\n","erlang:is_process_alive(pid(0, 141, 0)).\n",
 "msgpack_rpc_fileio_server:start_link(standard_io, undef, []).\n",
 "f(), P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n","f().\n",
 "erlang:port_command(P, msgpack:pack({<<\"123\">>})).\n",
 "msgpack:pack(<<132>>).\n",
 "msgpack:pack({[{<<\"c\">>, <<\"a\">>}, {<<\"b\">>, <<\"123\">>}]}).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"c\">>, <<\"a\">>}, {<<\"b\">>, <<\"123\">>}]})).\n",
 "P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "msgpack:unpack(<<132>>).\n","msgpack:pack({[1, 2, 3, 4]}).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"c\">>, <<\"a\">>}, {<<\"b\">>, <<\"123\">>}]})).\n",
 "D = msgpack:pack({[{<<\"c\">>, <<\"a\">>}, {<<\"b\">>, <<\"123\">>}]}).\n",
 "msgpack:pack({[{<<\"c\">>, <<\"a\">>}, {<<\"b\">>, <<\"123\">>}]}).\n",
 "msgpack:pack({[<<\"c\">>, <<\"a\">>, <<\"123\">>]}).\n",
 "msgpack:pack({<<\"c\">>, <<\"a\">>, <<\"123\">>}).\n",
 "erlang:port_command(P, msgpack:pack({<<\"c\">>, <<\"a\">>, <<\"123\">>})).\n",
 "123.\n","erlang:port_command(P, msgpack:pack(<<\"c\">>)).\n",
 "erlang:port_command(P, msgpack:pack(<<\"b\">>)).\n",
 "erlang:port_command(P, msgpack:pack(<<\"a\">>)).\n",
 "P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "file:read(standard_io, 16).\n","msgpack:unpack_stream(<<A, B>>).\n",
 "msgpack:unpack_stream(<<B>>).\n","msgpack:unpack_stream(<<A>>).\n",
 "msgpack:unpack_stream(B).\n","msgpack:unpack_stream(A).\n","456.\n",
 "123.\n","B.\n","A.\n","<<A:8, B:8>> = msgpack:pack(<<\"a\">>).\n",
 "msgpack:pack(<<\"a\">>).\n","\"¡\" ++ [0].\n","\"¡\".\n",
 "P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "dbg:tpl(nvim, x).\n","dbg:p(all, call).\n",
 "dbg:tracer(process, {fun dbg:dhandler/2, X}).\n","nvim:module_info().\n",
 "dbg:tpl(nvim, x).\n","dbg:tpl(nvim).\n","dbg:p(all, call).\n",
 "dbg:tracer(process, {fun dbg:dhandler/2, X}).\n",
 "{ok, X} = file:open(\"/tmp/x\", write).\n",
 "{ok, F} = file:open(\"/tmp/x\", write).\n",
 "{ok, F} = file:open(\"/tmp/z\", read).\n",
 "{ok, F} = file:open(\"\", read).\n",
 "erlang:port_command(P, msgpack:pack(<<\"a\">>)).\n",
 "P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n","123.\n",
 "<< B1/bytes, B2/bytes >>.\n","B2 = <<\"qwe\">>.\n","B1 = <<\"asd\">>.\n",
 "D1 = msgpack:pack(<<\"b\">>).\n","D = msgpack:pack(<<\"b\">>).\n",
 "msgpack:unpack_stream(D).\n","D = msgpack:pack(<<\"a\">>).\n",
 "erlang:port_command(P, msgpack:pack(<<\"a\">>)).\n",
 "P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n","f().\n",
 "msgpack:pack(<<\"a\">>).\n","msgpack:pack(\"a\").\n","msgpack:pack([]).\n",
 "msgpack:pack({}).\n","msgpack:pack({[{<<\"d\">>}]}).\n",
 "msgpack:pack({[{<<\"s\">>}]}).\n","msgpack:pack({[{<<\"a\">>}]}).\n",
 "msgpack:pack({[{<<\"asd\">>}]}).\n",
 "msgpack:pack({[{<<\"asd\">>, <<\"qwe\">>}]}).\n",
 "erlang:port_command(P, msgpack:pack({[{<<\"asd\">>, <<\"qwe\">>}]})).\n",
 "P = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "msgpack:unpack_stream(<<0>>).\n","msgpack:unpack_stream(<<a>>).\n",
 "msgpack:unpack_stream(<<>>).\n","erlang:port_command(NV, \"asd\").\n",
 "NV = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(NV, \"asd\").\n","flush().\n",
 "erlang:port_command(NV, \"asd\").\n",
 "NV = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:port_command(NV, \"asd\").\n",
 "NV = erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:open_port({spawn, \"./nv.escript\"}, []).\n",
 "erlang:open_port(nv, [{spawn_executable, \"./nv.escript\"}]).\n",
 "erlang:open_port(nv, [{spawn, \"./nv.escript\"}]).\n",
 "erlang:open_port(nv, [{spawn, \"nv.escript\"}]).\n",
 "erlang:open_port(\"nv.escript\").\n","dbg:tpl(msgpack_rpc_server, []).\n",
 "dbg:tpl(msgpack_rpc_client, []).\n",
 "dbg:tpl(msgpack_rpc_connection, []).\n","dbg:p(all, call).\n",
 "dbg:tracer().\n","os:cmd(\"make-tags\").\n",
 "erlang:is_process_alive(NVim).\n","sys:get_state(NVim).\n",
 "msgpack_rpc_client:join(NVim).\n","flush().\n","l(nvim).\n","flush().\n",
 "msgpack_rpc_client:call(NVim, vim_get_current_line, []).\n",
 "f(), {ok, NVim} = msgpack_rpc_client:connect(tcp, localhost, 6666, []).\n",
 "msgpack_rpc_client:call(NVim, vim_get_current_line, []).\n",
 "erlang:is_process_alive(NVim).\n",
 "f(), {ok, NVim} = msgpack_rpc_client:connect(tcp, localhost, 6666, []).\n",
 "erlang:is_process_alive(NVim).\n",
 "msgpack_rpc_client:call(NVim, vim_get_current_line, []).\n",
 "msgpack_rpc_client:call(NVim, <<\"vim_get_current_line\">>, []).\n",
 "erlang:is_process_alive(NVim).\n",
 "{ok, NVim} = msgpack_rpc_client:connect(tcp, localhost, 6666, []).\n",
 "f().\n","erlang:is_process_alive(NVim).\n","NVim.\n","rp(v(-1)).\n",
 "lists:sort( nvim:functions() ).\n","nvim:functions().\n","l().\n",
 "nvim:functions().\n","nvim:api_info().\n","rp(v(-1)).\n",
 "lists:sort(nvim:api_info()).\n","nvim:api_info().\n",
 "{ok, NVim} = msgpack_rpc_client:connect(tcp, localhost, 6666, []).\n",
 "msgpack_rpc_client:connect(tcp, localhost, 6666, []).\n",
 "msgpack_rpc_client:connect(tcp, \"localhost\", 6666, []).\n",
 "msgpack_rpc_client:connect(unix, \"/tmp/nvim2e8fB3/0\", 0, []).\n",
 "msgpack_rpc_client:test().\n","l(msgpack_rpc_client).\n",
 "l(msgpack_rpc).\n","l(msgpack_rpc_erlang).\n","nvim:api_info().\n","l().\n",
 "nvim:api_info().\n","l(nvim).\n","l1.\n",".\n","l1\n"].